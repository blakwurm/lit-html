{"version":3,"file":"parts_test.js","sourceRoot":"","sources":["../../../src/test/lib/parts_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributeCommitter, AttributePart, createMarker, DefaultTemplateProcessor, directive, EventPart, html, NodePart, Part, render, templateFactory, TemplateResult} from '../../lit-html.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\n\nconst assert = chai.assert;\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nsuite('Parts', () => {\n  suite('AttributePart', () => {\n    let element: HTMLElement;\n    let committer: AttributeCommitter;\n    let part: AttributePart;\n\n    setup(() => {\n      element = document.createElement('div');\n      committer = new AttributeCommitter(element, 'foo', ['', '']);\n      part = committer.parts[0];\n    });\n\n    suite('setValue', () => {\n      test(\n          'does not dirty the committer when setting the same value twice',\n          () => {\n            part.setValue('bar');\n            part.commit();\n            assert.equal(element.getAttribute('foo'), 'bar');\n            part.setValue('bar');\n            assert.equal(committer.dirty, false);\n          });\n\n      test('does not iterate iterable primitives', () => {\n        (Number.prototype as any)[Symbol.iterator] = function() {\n          let i = -1;\n          const limit = this.valueOf();\n          return {\n            next() {\n              if (++i < limit) {\n                return {value: i, done: false};\n              }\n              return {done: true};\n            },\n          };\n        };\n\n        try {\n          part.setValue(3);\n          part.commit();\n          assert.equal(element.getAttribute('foo'), '3');\n        } finally {\n          delete (Number.prototype as any)[Symbol.iterator];\n        }\n      });\n\n      test('does not iterate string primitives', () => {\n        const iterator = String.prototype[Symbol.iterator];\n        String.prototype[Symbol.iterator] = function() {\n          throw new Error('FAIL');\n        };\n\n        try {\n          part.setValue('bar');\n          part.commit();\n          assert.equal(element.getAttribute('foo'), 'bar');\n        } finally {\n          String.prototype[Symbol.iterator] = iterator;\n        }\n      });\n    });\n  });\n\n  suite('NodePart', () => {\n    let container: HTMLElement;\n    let startNode: Node;\n    let endNode: Node;\n    let part: NodePart;\n\n    setup(() => {\n      container = document.createElement('div');\n      startNode = createMarker();\n      endNode = createMarker();\n      container.appendChild(startNode);\n      container.appendChild(endNode);\n      part = new NodePart({templateFactory});\n      part.startNode = startNode;\n      part.endNode = endNode;\n    });\n\n    suite('setValue', () => {\n      test('accepts a string', () => {\n        part.setValue('foo');\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), 'foo');\n      });\n\n      test('accepts a number', () => {\n        part.setValue(123);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '123');\n      });\n\n      test('accepts undefined', () => {\n        part.setValue(undefined);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '');\n      });\n\n      test('accepts null', () => {\n        part.setValue(null);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '');\n      });\n\n      test('accepts a symbol', () => {\n        const sym = Symbol();\n        part.setValue(sym);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), String(sym));\n      });\n\n      test('accepts a symbol with a description', () => {\n        const sym = Symbol('description!');\n        part.setValue(sym);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), String(sym));\n      });\n\n      test('accepts a symbol on subsequent renders', () => {\n        const sym1 = Symbol();\n        part.setValue(sym1);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), String(sym1));\n\n        // If the previously rendered value caused a single text node to be\n        // created, then subsequent renders will try to update the existing text\n        // node by setting `.data`. If the new value is a symbol and it isn't\n        // explicitly converted with `String`, then this would throw.\n        const sym2 = Symbol('description!');\n        part.setValue(sym2);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), String(sym2));\n      });\n\n      test('accepts an object', () => {\n        part.setValue({});\n        part.commit();\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '[object Object]');\n      });\n\n      test('accepts an object with a `toString` method', () => {\n        part.setValue({\n          toString() {\n            return 'toString!';\n          }\n        });\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), 'toString!');\n      });\n\n      test('accepts a function', () => {\n        const f = () => {\n          throw new Error();\n        };\n        part.setValue(f);\n        part.commit();\n      });\n\n      test('accepts an element', () => {\n        part.setValue(document.createElement('p'));\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '<p></p>');\n      });\n\n      test('accepts arrays', () => {\n        part.setValue([1, 2, 3]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '123');\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n      });\n\n      test('accepts an empty array', () => {\n        part.setValue([]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '');\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n      });\n\n      test('accepts nested arrays', () => {\n        part.setValue([1, [2], 3]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '123');\n        assert.deepEqual(\n            Array.from(container.childNodes).map((n) => n.nodeValue),\n            ['', '', '1', '', '', '2', '', '', '3', '', '']);\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n      });\n\n      test('accepts nested templates', () => {\n        part.setValue(html`<h1>${'foo'}</h1>`);\n        part.commit();\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<h1>foo</h1>');\n      });\n\n      test('accepts arrays of nested templates', () => {\n        part.setValue([1, 2, 3].map((i) => html`${i}`));\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '123');\n      });\n\n      test('accepts an array of elements', () => {\n        const children = [\n          document.createElement('p'),\n          document.createElement('a'),\n          document.createElement('span')\n        ];\n        part.setValue(children);\n        part.commit();\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<p></p><a></a><span></span>');\n      });\n\n      test('nested TemplateResults use their own processor', () => {\n        // TODO (justinfagnani): rewrite to not use render(), but use NodePart\n        // directly like the other tests here\n        class TestTemplateProcessor extends DefaultTemplateProcessor {\n          handleAttributeExpressions(\n              element: Element, name: string, strings: string[]) {\n            if (name[0] === '&') {\n              return super.handleAttributeExpressions(\n                  element, name.slice(1), strings, {templateFactory});\n            }\n            return super.handleAttributeExpressions(\n                element, name, strings, {templateFactory});\n          }\n        }\n        const processor = new TestTemplateProcessor();\n        const testHtml = (strings: TemplateStringsArray, ...values: any[]) =>\n            new TemplateResult(strings, values, 'html', processor);\n\n        render(html`${testHtml`<div &foo=\"${'foo'}\"></div>`}`, container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<div foo=\"foo\"></div>');\n      });\n\n      test('updates a simple value to a complex one', () => {\n        let value: string|TemplateResult = 'foo';\n        const t = () => html`<div>${value}</div>`;\n        render(t(), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n        value = html`<span>bar</span>`;\n        render(t(), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<div><span>bar</span></div>');\n      });\n\n      test('updates a complex value to a simple one', () => {\n        let value: string|TemplateResult = html`<span>bar</span>`;\n        const t = () => html`<div>${value}</div>`;\n        render(t(), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<div><span>bar</span></div>');\n\n        value = 'foo';\n        render(t(), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n      });\n\n      test('updates when called multiple times with simple values', () => {\n        part.setValue('abc');\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), 'abc');\n        part.setValue('def');\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), 'def');\n      });\n\n      test('updates when called multiple times with arrays', () => {\n        part.setValue([1, 2, 3]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '123');\n        assert.deepEqual(\n            Array.from(container.childNodes).map((n) => n.nodeValue),\n            ['', '', '1', '', '2', '', '3', '', '']);\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n\n        part.setValue([]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '');\n        assert.deepEqual(\n            Array.from(container.childNodes).map((n) => n.nodeValue), ['', '']);\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n      });\n\n      test('updates when called multiple times with arrays 2', () => {\n        part.setValue([1, 2, 3]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '123');\n        assert.deepEqual(\n            Array.from(container.childNodes).map((n) => n.nodeValue),\n            ['', '', '1', '', '2', '', '3', '', '']);\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n\n        part.setValue([4, 5]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '45');\n        assert.deepEqual(\n            Array.from(container.childNodes).map((n) => n.nodeValue),\n            ['', '', '4', '', '5', '', '']);\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n\n        part.setValue([]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '');\n        assert.deepEqual(\n            Array.from(container.childNodes).map((n) => n.nodeValue), ['', '']);\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n\n        part.setValue([4, 5]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '45');\n        assert.deepEqual(\n            Array.from(container.childNodes).map((n) => n.nodeValue),\n            ['', '', '4', '', '5', '', '']);\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n      });\n\n      test('updates nested arrays', () => {\n        part.setValue([1, [2], 3]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '123');\n        assert.deepEqual(\n            Array.from(container.childNodes).map((n) => n.nodeValue),\n            ['', '', '1', '', '', '2', '', '', '3', '', '']);\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n\n        part.setValue([[1], 2, 3]);\n        part.commit();\n        assert.equal(stripExpressionMarkers(container.innerHTML), '123');\n        assert.deepEqual(\n            Array.from(container.childNodes).map((n) => n.nodeValue),\n            ['', '', '', '1', '', '', '2', '', '3', '', '']);\n        assert.strictEqual<Node>(container.firstChild!, startNode);\n        assert.strictEqual<Node>(container.lastChild!, endNode);\n      });\n\n      test('updates arrays with siblings', () => {\n        let items = [1, 2, 3];\n        const t = () => html`<p></p>${items}<a></a>`;\n\n        render(t(), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<p></p>123<a></a>');\n\n        items = [1, 2, 3, 4];\n        render(t(), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<p></p>1234<a></a>');\n      });\n\n      test(\n          'updates are stable when called multiple times with templates',\n          () => {\n            let value = 'foo';\n            const r = () => html`<h1>${value}</h1>`;\n            part.setValue(r());\n            part.commit();\n            assert.equal(\n                stripExpressionMarkers(container.innerHTML), '<h1>foo</h1>');\n            const originalH1 = container.querySelector('h1');\n\n            value = 'bar';\n            part.setValue(r());\n            part.commit();\n            assert.equal(\n                stripExpressionMarkers(container.innerHTML), '<h1>bar</h1>');\n            const newH1 = container.querySelector('h1');\n            assert.strictEqual(newH1, originalH1);\n          });\n\n      test(\n          'updates are stable when called multiple times with arrays of templates',\n          () => {\n            let items = [1, 2, 3];\n            const r = () => items.map((i) => html`<li>${i}</li>`);\n            part.setValue(r());\n            part.commit();\n            assert.equal(\n                stripExpressionMarkers(container.innerHTML),\n                '<li>1</li><li>2</li><li>3</li>');\n            const originalLIs = Array.from(container.querySelectorAll('li'));\n\n            items = [3, 2, 1];\n            part.setValue(r());\n            part.commit();\n            assert.equal(\n                stripExpressionMarkers(container.innerHTML),\n                '<li>3</li><li>2</li><li>1</li>');\n            const newLIs = Array.from(container.querySelectorAll('li'));\n            assert.deepEqual(newLIs, originalLIs);\n          });\n    });\n\n    suite('insertAfterNode', () => {\n      test(\n          'inserts part and sets values between ref node and its next sibling',\n          () => {\n            const testEndNode = createMarker();\n            container.appendChild(testEndNode);\n            const testPart = new NodePart({templateFactory});\n            testPart.insertAfterNode(endNode);\n            assert.equal(testPart.startNode, endNode);\n            assert.equal(testPart.endNode, testEndNode);\n            const text = document.createTextNode('');\n            testPart.setValue(text);\n            testPart.commit();\n            assert.deepEqual(\n                Array.from(container.childNodes),\n                [startNode, endNode, text, testEndNode]);\n          });\n    });\n\n    suite('appendIntoPart', () => {\n      test(\n          'inserts part and sets values between ref node and its next sibling',\n          () => {\n            const testPart = new NodePart({templateFactory});\n            testPart.appendIntoPart(part);\n            assert.instanceOf(testPart.startNode, Comment);\n            assert.instanceOf(testPart.endNode, Comment);\n            const text = document.createTextNode('');\n            testPart.setValue(text);\n            testPart.commit();\n            assert.deepEqual(Array.from(container.childNodes), [\n              startNode,\n              testPart.startNode,\n              text,\n              testPart.endNode,\n              endNode,\n            ]);\n\n            const parentText = document.createTextNode('');\n            part.setValue(parentText);\n            part.commit();\n            assert.deepEqual(Array.from(container.childNodes), [\n              startNode,\n              parentText,\n              endNode,\n            ]);\n          });\n    });\n\n    suite('insertAfterPart', () => {\n      test('inserts part and sets values after another part', () => {\n        const testPart = new NodePart({templateFactory});\n        testPart.insertAfterPart(part);\n        assert.instanceOf(testPart.startNode, Comment);\n        assert.equal(testPart.endNode, endNode);\n        const text = document.createTextNode('');\n        testPart.setValue(text);\n        testPart.commit();\n        assert.deepEqual(\n            Array.from(container.childNodes),\n            [startNode, testPart.startNode, text, endNode]);\n\n        const previousText = document.createTextNode('');\n        part.setValue(previousText);\n        part.commit();\n        assert.deepEqual(\n            Array.from(container.childNodes),\n            [startNode, previousText, testPart.startNode, text, endNode]);\n      });\n    });\n\n    suite('clear', () => {\n      test('is a no-op on an already empty range', () => {\n        part.clear();\n        assert.deepEqual(\n            Array.from(container.childNodes), [startNode, endNode]);\n      });\n\n      test('clears a range', () => {\n        container.insertBefore(document.createTextNode('foo'), endNode);\n        part.clear();\n        assert.deepEqual(\n            Array.from(container.childNodes), [startNode, endNode]);\n      });\n    });\n\n    suite('directive holds NodePart', () => {\n      test('does not throw errors when part is detached', () => {\n        let part: Part;\n        const fooDirective = directive(() => (p: Part) => {\n          part = p;\n        });\n\n        const t = (bool: boolean) =>\n            html`<div>${bool ? html`${fooDirective()}` : 'detached'}</div>`;\n\n        // First render with unresolved Promise\n        render(t(true), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n        // Simulate an async part settting.\n        part!.setValue('foo');\n        part!.commit();\n\n        // Now detach the part's wrapping TemplateResult\n        render(t(false), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<div>detached</div>');\n\n        // Simulate an async part settting.\n        part!.setValue('bar');\n        part!.commit();\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<div>detached</div>');\n      });\n    });\n  });\n\n  suite('EventPart', () => {\n    let part: EventPart;\n    let element: HTMLElement;\n\n    // Detect event options support\n    let eventOptionsSupported = false;\n    let captureSupported = false;\n    let passiveSupported = false;\n    let onceSupported = false;\n\n    try {\n      const options = {\n        get capture() {\n          eventOptionsSupported = true;\n          captureSupported = true;\n          return false;\n        },\n        get passive() {\n          eventOptionsSupported = true;\n          passiveSupported = true;\n          return false;\n        },\n        get once() {\n          eventOptionsSupported = true;\n          onceSupported = true;\n          return false;\n        },\n      };\n      window.addEventListener('test', options as any, options);\n      window.removeEventListener('test', options as any, options);\n    } catch (_e) {  // eslint-disable-line no-empty\n    }\n\n    setup(() => {\n      element = document.createElement('div');\n      document.body.appendChild(element);\n    });\n\n    test('supports event listener options on functions', () => {\n      console.log('eventOptionsSupported', eventOptionsSupported);\n      console.log('captureSupported', captureSupported);\n      console.log('passiveSupported', passiveSupported);\n      console.log('onceSupported', onceSupported);\n      part = new EventPart(element, 'click');\n      let listenerCalled = false;\n      let captureCalled = false;\n      let passiveCalled = false;\n      let onceCalled = false;\n\n      const listener = (_e: Event) => {\n        listenerCalled = true;\n      };\n      Object.defineProperties(listener, {\n        capture: {\n          get() {\n            captureCalled = true;\n          }\n        },\n        passive: {\n          get() {\n            passiveCalled = true;\n          }\n        },\n        once: {\n          get() {\n            onceCalled = true;\n          }\n        }\n      });\n\n      part.setValue(listener);\n      part.commit();\n      element.click();\n      assert.isTrue(listenerCalled, 'listenerCalled');\n      assert.isTrue(captureCalled, 'captureCalled');\n      if (passiveSupported) {\n        assert.isTrue(passiveCalled, 'passiveCalled');\n      }\n      if (onceSupported) {\n        assert.isTrue(onceCalled, 'onceCalled');\n      }\n    });\n\n    test('supports event listener options on objects', () => {\n      part = new EventPart(element, 'click');\n      let listenerCalled = false;\n      let captureCalled = false;\n      let passiveCalled = false;\n      let onceCalled = false;\n\n      const listener = {\n        handleEvent(_e: Event) {\n          listenerCalled = true;\n        },\n        get capture() {\n          captureCalled = true;\n          return undefined;\n        },\n        get passive() {\n          passiveCalled = true;\n          return undefined;\n        },\n        get once() {\n          onceCalled = true;\n          return undefined;\n        }\n      };\n\n      part.setValue(listener);\n      part.commit();\n      element.click();\n      assert.isTrue(listenerCalled, 'listenerCalled');\n      assert.isTrue(captureCalled, 'captureCalled');\n      if (passiveSupported) {\n        assert.isTrue(passiveCalled, 'passiveCalled');\n      }\n      if (onceSupported) {\n        assert.isTrue(onceCalled, 'onceCalled');\n      }\n    });\n  });\n});\n"]}