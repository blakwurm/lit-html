{"version":3,"file":"test-async-iterable.js","sourceRoot":"","sources":["../../../src/test/lib/test-async-iterable.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;;;;AAEH,kDAAkD;AAClD,IAAI,OAAO,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,aAAa,KAAK,SAAS,EAAE;IACrE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,eAAe,EAAE,EAAC,KAAK,EAAE,MAAM,EAAE,EAAC,CAAC,CAAC;CACnE;AAED;;;;GAIG;AACH,MAAM,OAAO,iBAAiB;IAA9B;QACE;;;WAGG;QACK,eAAU,GACd,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,CAAC;IA6BjE,CAAC;IA1BS,CAAC,MAAM,CAAC,aAAa,CAAC;;YAC5B,OAAO,IAAI,EAAE;gBACX,oBAAM,cAAM,IAAI,CAAC,UAAU,CAAA,CAAA,CAAC;aAC7B;QACH,CAAC;KAAA;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAI,CAAC,KAAQ;QACjB,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC;QACrC,MAAM,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACnD,IAAI,CAAC,UAAU;YACX,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,CAAC;QAC/D,sEAAsE;QACtE,mDAAmD;QACnD,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAC3B,oCAAoC;QACpC,MAAM,YAAY,CAAC;QACnB,yEAAyE;QACzE,uEAAuE;QACvE,kDAAkD;QAClD,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n// Set Symbol.asyncIterator on browsers without it\nif (typeof Symbol !== undefined && Symbol.asyncIterator === undefined) {\n  Object.defineProperty(Symbol, 'asyncIterator', {value: Symbol()});\n}\n\n/**\n * An async iterable that can have values pushed into it for testing code\n * that consumes async iterables. This iterable can only be safely consumed\n * by one listener.\n */\nexport class TestAsyncIterable<T> implements AsyncIterable<T> {\n  /**\n   * A Promise that resolves with the next value to be returned by the\n   * async iterable returned from iterable()\n   */\n  private _nextValue: Promise<T> =\n      new Promise((resolve) => this._resolveNextValue = resolve);\n  private _resolveNextValue!: (value: T) => void;\n\n  async * [Symbol.asyncIterator]() {\n    while (true) {\n      yield await this._nextValue;\n    }\n  }\n\n  /**\n   * Pushes a new value and returns a Promise that resolves when the value\n   * has been emitted by the iterator. push() must not be called before\n   * a previous call has completed, so always await a push() call.\n   */\n  async push(value: T): Promise<void> {\n    const currentValue = this._nextValue;\n    const currentResolveValue = this._resolveNextValue;\n    this._nextValue =\n        new Promise((resolve) => this._resolveNextValue = resolve);\n    // Resolves the previous value of _nextValue (now currentValue in this\n    // scope), making `yield await this._nextValue` go.\n    currentResolveValue(value);\n    // Waits for the value to be emitted\n    await currentValue;\n    // Need to wait for one more microtask for value to be rendered, but only\n    // when devtools is closed. Waiting for rAF might be more reliable, but\n    // this waits the minimum that seems reliable now.\n    await Promise.resolve();\n  }\n}\n"]}