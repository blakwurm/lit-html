{"version":3,"file":"trusted-types_test.js","sourceRoot":"","sources":["../../../src/test/lib/trusted-types_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2019 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {unsafeHTML} from '../../directives/unsafe-html.js';\nimport {html, render} from '../../lit-html.js';\nimport {trustedTypesIsEnforced} from '../test-utils/security.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\n\nconst assert = chai.assert;\n\nconst unsafeScriptString = 'alert(0)';\n\nif (window.trustedTypes !== undefined) {\n  const policy: TrustedTypePolicy =\n      window.trustedTypes.createPolicy('lit-html-test', {\n        createHTML(input) {\n          return input;\n        },\n        createScript(input) {\n          return input;\n        },\n        createScriptURL(input) {\n          return input;\n        },\n        createURL(input) {\n          return input;\n        },\n      });\n  suite('rendering with trusted type values', () => {\n    let container: HTMLDivElement;\n    suiteSetup(() => {\n      // create app root in the DOM\n      container = document.createElement('div');\n      document.body.appendChild(container);\n    });\n\n    suiteTeardown(() => {\n      document.body.removeChild(container);\n    });\n\n    test('trusted types works with native APIs', () => {\n      const el = document.createElement('div');\n      assert.equal(el.innerHTML, '');\n      el.innerHTML = policy.createHTML('<span>val</span>') as unknown as string;\n      assert.equal(el.innerHTML, '<span>val</span>');\n    });\n\n    if (trustedTypesIsEnforced()) {\n      suite('throws on untrusted values', () => {\n        test('unsafe html', () => {\n          const template = html`${unsafeHTML('<b>unsafe bold</b>')}`;\n          assert.throws(() => {\n            render(template, container);\n          });\n        });\n\n        test('unsafe attribute', () => {\n          const template = html`<iframe srcdoc=${unsafeScriptString}></iframe>`;\n          assert.throws(() => {\n            render(template, container);\n          });\n        });\n      });\n    }\n\n    suite('runs without error on trusted values', () => {\n      test('unsafeHTML() with blessed input', () => {\n        const template =\n            html`${unsafeHTML(policy.createHTML('<b>safe bold</b>'))}`;\n        render(template, container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<b>safe bold</b>');\n      });\n\n      test('blessed input on unsafe attribute', () => {\n        const safeHtml =\n            policy.createHTML('<b>safe bold</b>') as unknown as string;\n        const template = html`<iframe srcdoc=${safeHtml}>`;\n        render(template, container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<iframe srcdoc=\"<b>safe bold</b>\"></iframe>');\n      });\n\n      test('blessed input on unsafe property', () => {\n        const safeHtml =\n            policy.createHTML('<b>safe bold</b>') as unknown as string;\n        const template = html`<iframe .srcdoc=${safeHtml}>`;\n        render(template, container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<iframe srcdoc=\"<b>safe bold</b>\"></iframe>');\n      });\n    });\n  });\n} else {\n  it('trusted types not present in this browser', () => null);\n}\n"]}