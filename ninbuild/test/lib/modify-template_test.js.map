{"version":3,"file":"modify-template_test.js","sourceRoot":"","sources":["../../../src/test/lib/modify-template_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from '../../lib/modify-template.js';\nimport {render} from '../../lib/render.js';\nimport {html, templateFactory} from '../../lit-html.js';\nimport {policy} from '../test-utils/security.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\n\nconst assert = chai.assert;\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nsuite('add/remove nodes from template', () => {\n  let container: HTMLElement;\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  test(\n      'inserting nodes into template between parts renders/updates result',\n      () => {\n        const getResult = (a: any, b: any, c: any) => html`\n        <div foo=\"${a}\">\n          ${b}\n          <p>${c}</p>\n        </div>`;\n        const result = getResult('bar', 'baz', 'qux');\n        const template = templateFactory(result);\n        const div1 = document.createElement('div');\n        div1.innerHTML = policy.createHTML('<span>1</span>');\n        insertNodeIntoTemplate(\n            template, div1, template.element.content.firstChild);\n        const div2 = document.createElement('div');\n        div2.innerHTML = policy.createHTML('<span>2</span>');\n        insertNodeIntoTemplate(\n            template, div2, template.element.content.querySelector('p'));\n        const div3 = document.createElement('div');\n        div3.innerHTML = policy.createHTML('<span>3</span>');\n        insertNodeIntoTemplate(template, div3);\n        render(result, container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            `<div><span>1</span></div>\n        <div foo=\"bar\">\n          baz\n          <div><span>2</span></div><p>qux</p>\n        </div><div><span>3</span></div>`);\n        render(getResult('a', 'b', 'c'), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            `<div><span>1</span></div>\n        <div foo=\"a\">\n          b\n          <div><span>2</span></div><p>c</p>\n        </div><div><span>3</span></div>`);\n      });\n\n  test('inserting documentFragment into template', () => {\n    const getResult = (a: any, b: any, c: any) =>\n        html`<div foo=\"${a}\">${b}<p>${c}</p></div>`;\n    const result = getResult('bar', 'baz', 'qux');\n    const template = templateFactory(result);\n    const fragment1 = document.createDocumentFragment();\n    fragment1.appendChild(document.createElement('div'));\n    (fragment1.firstChild as HTMLElement).innerHTML =\n        policy.createHTML('<span>1</span>');\n    insertNodeIntoTemplate(\n        template, fragment1, template.element.content.firstChild);\n    const fragment2 = document.createDocumentFragment();\n    insertNodeIntoTemplate(\n        template, fragment2, template.element.content.querySelector('p'));\n    render(result, container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `<div><span>1</span></div><div foo=\"bar\">baz<p>qux</p></div>`);\n    render(getResult('a', 'b', 'c'), container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        `<div><span>1</span></div><div foo=\"a\">b<p>c</p></div>`);\n  });\n\n  test(\n      'removing nodes in template between parts renders/updates result', () => {\n        const getResult = (a: any, b: any, c: any) =>\n            html`<div name=\"remove\"><span>remove</span></div>\n        <div foo=\"${a}\"><div name=\"remove\"><span>remove</span></div>\n          ${b}\n          <div name=\"remove\"><span name=\"remove\">remove</span></div><p>${c}</p>\n        </div><div name=\"remove\"><span name=\"remove\"><span name=\"remove\">remove</span></span></div>`;\n        const result = getResult('bar', 'baz', 'qux');\n        const template = templateFactory(result);\n        const nodeSet = new Set<Node>();\n        const nodesToRemove =\n            template.element.content.querySelectorAll('[name=\"remove\"]');\n        for (const node of Array.from(nodesToRemove)) {\n          nodeSet.add(node);\n        }\n        removeNodesFromTemplate(template, nodeSet);\n        render(result, container);\n        assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <div foo=\"bar\">\n          baz\n          <p>qux</p>\n        </div>`);\n        render(getResult('a', 'b', 'c'), container);\n        assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <div foo=\"a\">\n          b\n          <p>c</p>\n        </div>`);\n      });\n\n  test(\n      'removing nodes in template containing parts renders/updates result',\n      () => {\n        const getResult = (a: any, b: any, c: any, r1: any, r2: any, r3: any) =>\n            html`<div name=\"remove\"><span>${r1}</span></div>\n        <div foo=\"${a}\"><div name=\"remove\"><span>${r2}</span></div>\n          ${b}\n          <div name=\"remove\"><span name=\"remove\">${r3}</span></div><p>${c}</p>\n        </div><div name=\"remove\"><span name=\"remove\"><span name=\"remove\">remove</span></span></div>`;\n        const result = getResult('bar', 'baz', 'qux', 'r1', 'r2', 'r3');\n        const template = templateFactory(result);\n        const nodeSet = new Set<Node>();\n        const nodesToRemove =\n            template.element.content.querySelectorAll('[name=\"remove\"]');\n        for (const node of Array.from(nodesToRemove)) {\n          nodeSet.add(node);\n        }\n        removeNodesFromTemplate(template, nodeSet);\n        render(result, container);\n        assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <div foo=\"bar\">\n          baz\n          <p>qux</p>\n        </div>`);\n        render(getResult('a', 'b', 'c', 'rr1', 'rr2', 'rr3'), container);\n        assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <div foo=\"a\">\n          b\n          <p>c</p>\n        </div>`);\n      });\n\n  test(\n      'removing nodes in template containing parts with in-active parts renders/updates result',\n      () => {\n        const getResult = (a: any, b: any, c: any, r1: any, r2: any, r3: any) =>\n            html`<div name=\"remove\"><span>${r1}</span></div>\n        <div foo=\"${a}\"><div name=\"remove\"><span>${r2}</span></div>\n          ${b}\n          <div name=\"remove\"><span name=\"remove\">${r3}</span></div><p>${c}</p>\n        </div><div name=\"remove\"><span name=\"remove\"><span name=\"remove\">remove</span></span></div>`;\n        const result = getResult('bar', 'baz', 'qux', 'r1', 'r2', 'r3');\n        const template = templateFactory(result);\n        let node;\n        // eslint-disable-next-line no-cond-assign\n        while (node =\n                   template.element.content.querySelector('[name=\"remove\"]')) {\n          const nodeSet = new Set<Node>();\n          nodeSet.add(node);\n          removeNodesFromTemplate(template, nodeSet);\n        }\n        render(result, container);\n        assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <div foo=\"bar\">\n          baz\n          <p>qux</p>\n        </div>`);\n        render(getResult('a', 'b', 'c', 'rr1', 'rr2', 'rr3'), container);\n        assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <div foo=\"a\">\n          b\n          <p>c</p>\n        </div>`);\n      });\n});\n"]}