{"version":3,"file":"render_test.js","sourceRoot":"","sources":["../../../src/test/lib/render_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, html, noChange, NodePart, nothing, Part, render, svg, templateFactory} from '../../lit-html.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\n\nconst assert = chai.assert;\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nconst isTemplatePolyfilled =\n    ((HTMLTemplateElement as any).decorate != null ||\n     (window as any).ShadyDOM && (window as any).ShadyDOM.inUse);\nconst testSkipForTemplatePolyfill = (test: any) =>\n    isTemplatePolyfilled ? test.skip : test;\n\n/* eslint @typescript-eslint/camelcase: [\"error\", { allow: [\"Safari10_0\"] }] */\nconst isSafari10_0 =\n    (window.navigator.userAgent.indexOf('AppleWebKit/602') !== -1);\nconst testSkipSafari10_0 = (test: any) => isSafari10_0 ? test.skip : test;\n\nconst isChrome41 = (window.navigator.userAgent.indexOf('Chrome/41') !== -1);\nconst testSkipChrome41 = (test: any) => isChrome41 ? test.skip : test;\n\nconst testIfHasSymbol = (test: any) =>\n    (window as any).Symbol === undefined ? test.skip : test;\n\nconst ua = window.navigator.userAgent;\nconst isIe = ua.indexOf('Trident/') > 0;\n\nconst suiteIfCustomElementsAreSupported = (suite: any) =>\n    (window.customElements != null) ? suite : suite.skip;\n\nsuite('render()', () => {\n  let container: HTMLElement;\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  suite('text', () => {\n    test('renders plain text expression', () => {\n      render(html`test`, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), 'test');\n    });\n\n    test('renders a string', () => {\n      render(html`<div>${'foo'}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n    });\n\n    test('renders a number', () => {\n      render(html`<div>${123}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>123</div>');\n    });\n\n    test('renders undefined', () => {\n      render(html`<div>${undefined}</div>`, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    });\n\n    test('renders null', () => {\n      render(html`<div>${null}</div>`, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    });\n\n    test('renders noChange', () => {\n      const template = (i: any) => html`<div>${i}</div>`;\n      render(template('foo'), container);\n      render(template(noChange), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n    });\n\n    test('renders nothing', () => {\n      const template = (i: any) => html`<div>${i}</div>`;\n      render(template('foo'), container);\n      render(template(nothing), container);\n      const children = Array.from(container.querySelector('div')!.childNodes);\n      assert.isEmpty(\n          children.filter((node) => node.nodeType !== Node.COMMENT_NODE));\n    });\n\n    testIfHasSymbol(test)('renders a Symbol', () => {\n      render(html`<div>${Symbol('A')}</div>`, container);\n      assert.include(\n          container.querySelector('div')!.textContent!.toLowerCase(), 'symbol');\n    });\n\n    test('does not call a function bound to text', () => {\n      const f = () => {\n        throw new Error();\n      };\n      render(html`${f}`, container);\n    });\n\n    test('renders arrays', () => {\n      render(html`<div>${[1, 2, 3]}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>123</div>');\n    });\n\n    test('renders nested templates', () => {\n      const partial = html`<h1>${'foo'}</h1>`;\n      render(html`${partial}${'bar'}`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<h1>foo</h1>bar');\n    });\n\n    test('renders parts with whitespace after them', () => {\n      render(html`<div>${'foo'} </div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>foo </div>');\n    });\n\n    test('renders parts that look like attributes', () => {\n      render(html`<div>foo bar=${'baz'}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div>foo bar=baz</div>');\n    });\n\n    test('renders multiple parts per element, preserving whitespace', () => {\n      render(html`<div>${'foo'} ${'bar'}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>foo bar</div>');\n    });\n\n    test('values contain interpolated values', () => {\n      const t = html`${'a'},${'b'},${'c'}`;\n      render(t, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), 'a,b,c');\n    });\n\n    test('renders a template nested multiple times', () => {\n      const partial = html`<h1>${'foo'}</h1>`;\n      render(html`${partial}${'bar'}${partial}${'baz'}qux`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<h1>foo</h1>bar<h1>foo</h1>bazqux');\n    });\n\n    test('renders arrays of nested templates', () => {\n      render(html`<div>${[1, 2, 3].map((i) => html`${i}`)}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>123</div>');\n    });\n\n    // TODO(justinfagnani): add this test back with a test TemplateProcessor and\n    // html tag.\n    test.skip(\n        'overwrites an existing (plain) TemplateInstance if one exists, ' +\n            'even if it has a matching Template',\n        () => {\n          const t = (tag: any) => tag`<div>foo</div>`;\n\n          render(t(html), container);\n\n          assert.equal(container.children.length, 1);\n          const firstDiv = container.children[0];\n          assert.equal(firstDiv.textContent, 'foo');\n\n          render(t(html), container);\n\n          assert.equal(container.children.length, 1);\n          const secondDiv = container.children[0];\n          assert.equal(secondDiv.textContent, 'foo');\n\n          assert.notEqual(firstDiv, secondDiv);\n        });\n\n    test('renders an element', () => {\n      const child = document.createElement('p');\n      render(html`<div>${child}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div><p></p></div>');\n    });\n\n    test('renders an array of elements', () => {\n      const children = [\n        document.createElement('p'),\n        document.createElement('a'),\n        document.createElement('span')\n      ];\n      render(html`<div>${children}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div><p></p><a></a><span></span></div>');\n    });\n\n    test('renders forms as elements', () => {\n      // forms are both Node and iterable\n\n      const form = document.createElement('form');\n      const inputOne = document.createElement('input');\n      inputOne.name = 'one';\n      const inputTwo = document.createElement('input');\n      inputTwo.name = 'two';\n\n      form.appendChild(inputOne);\n      form.appendChild(inputTwo);\n\n      render(html`${form}`, container);\n\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<form><input name=\"one\"><input name=\"two\"></form>');\n    });\n\n    test('renders SVG', () => {\n      const container = document.createElement('svg');\n      const t = svg`<line y1=\"1\" y2=\"1\"/>`;\n      render(t, container);\n      const line = container.firstElementChild!;\n      assert.equal(line.tagName, 'line');\n      assert.equal(line.namespaceURI, 'http://www.w3.org/2000/svg');\n    });\n\n    test('renders SVG with bindings', () => {\n      const container = document.createElement('svg');\n      const pathDefinition = 'M7 14l5-5 5 5z';\n      const t = svg`<path d=\"${pathDefinition}\" />`;\n      render(t, container);\n      const path = container.firstElementChild as SVGPathElement;\n      // IE and Edge rewrite paths, so check a normalized value too\n      assert.include(\n          ['M7 14l5-5 5 5z', 'M 7 14 l 5 -5 l 5 5 Z'],\n          path.getAttribute('d'),\n          pathDefinition);\n    });\n\n    test('renders templates with comments', () => {\n      const t = html`\n        <div>\n          <!-- this is a comment -->\n          <h1 class=\"${'foo'}\">title</h1>\n          <p>${'foo'}</p>\n        </div>`;\n      render(t, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <div>\n          <!-- this is a comment -->\n          <h1 class=\"foo\">title</h1>\n          <p>foo</p>\n        </div>`);\n    });\n\n    test('renders comments with bindings', () => {\n      const t = html`\n        <!-- ${'foo'} -->\n        <p>${'bar'}</p>`;\n      render(t, container);\n      assert.equal(container.querySelector('p')!.textContent, 'bar');\n      assert.equal(container.textContent!.trim(), 'bar');\n    });\n\n    test('renders comments with bindings', () => {\n      const t = html`<!--${'foo'}-->`;\n      render(t, container);\n      assert.equal(container.textContent, '');\n    });\n\n    test('renders comments with attribute-like bindings', () => {\n      const t = html`\n        <!-- <div class=\"${'foo'}\"></div> -->\n        <p>${'bar'}</p>`;\n      render(t, container);\n      assert.equal(container.querySelector('p')!.textContent, 'bar');\n    });\n\n    test('renders comments with bindings followed by attr', () => {\n      const t = html`\n        <!-- ${'foo'} -->\n        <p bar=${'baz'}></p>`;\n      render(t, container);\n      assert.equal(container.querySelector('p')!.getAttribute('bar'), 'baz');\n    });\n\n    test('renders comments with multiple bindings', () => {\n      const t = html`\n        <!-- <div class=\"${'foo'}\">${'bar'}</div> -->\n        <p>${'baz'}</p>`;\n      render(t, container);\n      assert.equal(container.querySelector('p')!.textContent, 'baz');\n    });\n\n    test('handles comments with bindings', () => {\n      const t = html`<p>A<!-- ${'B'} ${'C'} -->D</p>`;\n      render(t, container);\n      // Use innerText instead of textContent because of a crazy bug in\n      // Chrome 41 where textContent would include the textContent of comments!\n      assert.equal(container.querySelector('p')!.innerText, 'AD');\n    });\n\n    test('handles elements in comments with attribute bindings', () => {\n      const t = html`A<!-- <div foo=${'bar'}>B</div>${'baz'} -->C`;\n      render(t, container);\n      // Use innerText instead of textContent because of a crazy bug in\n      // Chrome 41 where textContent would include the textContent of comments!\n      assert.equal(container.innerText, 'AC');\n    });\n\n    test('handles attribute bindings with comment-like values', () => {\n      const t = html`A<div foo=\"<!--${'bar'}\">B</div>C`;\n      render(t, container);\n      assert.equal(container.textContent, 'ABC');\n    });\n\n    test('handles comments with attribute-like content', () => {\n      const t = html`A<!-- foo=${'bar'}-->B`;\n      render(t, container);\n      // Use innerText instead of textContent because of a crazy bug in\n      // Chrome 41 where textContent would include the textContent of\n      // comments!\n      assert.equal(container.innerText, 'AB');\n    });\n\n    test('handles elements in comments with node bindings', () => {\n      const t = html`A<!-- <div>${'B'}</div>${'baz'} -->C`;\n      render(t, container);\n      // Use innerText instead of textContent because of a crazy bug in\n      // Chrome 41 where textContent would include the textContent of comments!\n      assert.equal(container.innerText, 'AC');\n    });\n\n    test('renders comments with multiple bindings followed by attr', () => {\n      const t = html`\n        <!-- ${'foo'} ${'bar'} -->\n        <p baz=${'qux'}></p>`;\n      render(t, container);\n      assert.equal(container.querySelector('p')!.getAttribute('baz'), 'qux');\n    });\n\n    test('does not break with an attempted dynamic start tag', () => {\n      // this won't work, but we'd like it to not throw an exception or break\n      // other bindings\n      render(html`<${'div'}></div><p>${'foo'}</p>`, container);\n      assert.equal(container.querySelector('p')!.textContent, 'foo');\n    });\n\n    test('does not break with an attempted dynamic end tag', () => {\n      // this won't work, but we'd like it to not throw an exception or break\n      // other bindings\n      render(html`<div></${'div'}><p>${'foo'}</p>`, container);\n      assert.equal(container.querySelector('p')!.textContent, 'foo');\n    });\n\n    test('renders legacy marker sequences in text nodes', () => {\n      // {{}} used to be the marker text and it was important to test that\n      // markers in user-templates weren't interpreted as expressions\n      const result = html`{{}}`;\n      assert.equal(templateFactory(result).parts.length, 0);\n      render(result, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '{{}}');\n    });\n\n    test('renders expressions with preceding elements', () => {\n      render(html`<a>${'foo'}</a>${html`<h1>${'bar'}</h1>`}`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<a>foo</a><h1>bar</h1>');\n\n      // This is nearly the same test case as above, but was causing a\n      // different stack trace\n      render(html`<a>${'foo'}</a>${'bar'}`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<a>foo</a>bar');\n    });\n  });\n\n  suite('attributes', () => {\n    test('renders to an attribute', () => {\n      render(html`<div foo=\"${'bar'}\"></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div foo=\"bar\"></div>');\n    });\n\n    testIfHasSymbol(test)('renders a Symbol to an attribute', () => {\n      render(html`<div foo=${Symbol('A')}></div>`, container);\n      assert.include(\n          container.querySelector('div')!.getAttribute('foo')!.toLowerCase(),\n          'symbol');\n    });\n\n    testIfHasSymbol(\n        test)('renders a Symbol in an array to an attribute', () => {\n      render(html`<div foo=${[Symbol('A')]}></div>`, container);\n      assert.include(\n          container.querySelector('div')!.getAttribute('foo')!.toLowerCase(),\n          'symbol');\n    });\n\n    test('renders multiple bindings in an attribute', () => {\n      render(html`<div foo=\"a${'b'}c${'d'}e\"></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div foo=\"abcde\"></div>');\n    });\n\n    test('renders two attributes on one element', () => {\n      const result = html`<div a=\"${1}\" b=\"${2}\"></div>`;\n      render(result, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div a=\"1\" b=\"2\"></div>');\n    });\n\n    test('renders a binding in a style attribute', () => {\n      const t = html`<div style=\"color: ${'red'}\"></div>`;\n      render(t, container);\n      if (isIe) {\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<div style=\"color: red;\"></div>');\n      } else {\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<div style=\"color: red\"></div>');\n      }\n    });\n\n    test('renders multiple bindings in a style attribute', () => {\n      const t = html`<div style=\"${'color'}: ${'red'}\"></div>`;\n      render(t, container);\n      if (isIe) {\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<div style=\"color: red;\"></div>');\n      } else {\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML),\n            '<div style=\"color: red\"></div>');\n      }\n    });\n\n    test('renders a binding in a class attribute', () => {\n      render(html`<div class=\"${'red'}\"></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div class=\"red\"></div>');\n    });\n\n    test('renders a binding in an input value attribute', () => {\n      render(html`<input value=\"${'the-value'}\">`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<input value=\"the-value\">');\n      assert.equal(container.querySelector('input')!.value, 'the-value');\n    });\n\n    test('renders a case-sensitive attribute', () => {\n      const size = 100;\n      render(html`<svg viewBox=\"0 0 ${size} ${size}\"></svg>`, container);\n      assert.include(\n          stripExpressionMarkers(container.innerHTML), 'viewBox=\"0 0 100 100\"');\n\n      // Make sure non-alpha valid attribute name characters are handled\n      render(html`<svg view_Box=\"0 0 ${size} ${size}\"></svg>`, container);\n      assert.include(\n          stripExpressionMarkers(container.innerHTML),\n          'view_Box=\"0 0 100 100\"');\n    });\n\n    test(\n        'renders to an attribute expression after an attribute literal', () => {\n          render(html`<div a=\"b\" foo=\"${'bar'}\"></div>`, container);\n          // IE and Edge can switch attribute order!\n          assert.include(\n              ['<div a=\"b\" foo=\"bar\"></div>', '<div foo=\"bar\" a=\"b\"></div>'],\n              stripExpressionMarkers(container.innerHTML));\n        });\n\n    test(\n        'renders to an attribute expression before an attribute literal',\n        () => {\n          render(html`<div foo=\"${'bar'}\" a=\"b\"></div>`, container);\n          // IE and Edge can switch attribute order!\n          assert.include(\n              ['<div a=\"b\" foo=\"bar\"></div>', '<div foo=\"bar\" a=\"b\"></div>'],\n              stripExpressionMarkers(container.innerHTML));\n        });\n\n    // Regression test for exception in template parsing caused by attributes\n    // reordering when a attribute binding precedes an attribute literal.\n    test('renders attribute binding after attribute binding that moved', () => {\n      render(\n          html`<a href=\"${'foo'}\" class=\"bar\"><div id=${'a'}></div></a>`,\n          container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          `<a class=\"bar\" href=\"foo\"><div id=\"a\"></div></a>`);\n    });\n\n    test('renders to an attribute without quotes', () => {\n      render(html`<div foo=${'bar'}></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div foo=\"bar\"></div>');\n    });\n\n    test('renders to multiple attribute expressions', () => {\n      render(\n          html`<div foo=\"${'Foo'}\" bar=\"${'Bar'}\" baz=${'Baz'}></div>`,\n          container);\n      assert.oneOf(stripExpressionMarkers(container.innerHTML), [\n        '<div foo=\"Foo\" bar=\"Bar\" baz=\"Baz\"></div>',\n        '<div foo=\"Foo\" baz=\"Baz\" bar=\"Bar\"></div>',\n        '<div bar=\"Bar\" foo=\"Foo\" baz=\"Baz\"></div>'\n      ]);\n    });\n\n    test('renders to attributes with attribute-like values', () => {\n      render(html`<div foo=\"bar=${'foo'}\"></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div foo=\"bar=foo\"></div>');\n    });\n\n    test('renders interpolation to an attribute', () => {\n      render(html`<div foo=\"1${'bar'}2${'baz'}3\"></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div foo=\"1bar2baz3\"></div>');\n    });\n\n    test('does not call a function bound to an attribute', () => {\n      const f = () => {\n        throw new Error();\n      };\n      render(html`<div foo=${f}></div>`, container);\n      const div = container.querySelector('div')!;\n      assert.isTrue(div.hasAttribute('foo'));\n    });\n\n    test('renders an array to an attribute', () => {\n      render(html`<div foo=${[1, 2, 3]}></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div foo=\"123\"></div>');\n    });\n\n    test('renders to an attribute before a node', () => {\n      render(html`<div foo=\"${'bar'}\">${'baz'}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div foo=\"bar\">baz</div>');\n    });\n\n    test('renders to an attribute after a node', () => {\n      render(html`<div>${'baz'}</div><div foo=\"${'bar'}\"></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div>baz</div><div foo=\"bar\"></div>');\n    });\n\n    test('renders undefined in attributes', () => {\n      render(html`<div attribute=\"it's ${undefined}\"></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div attribute=\"it\\'s undefined\"></div>');\n    });\n  });\n\n  suite('properties', () => {\n    test('sets properties', () => {\n      render(html`<div .foo=${123} .bar=${456}></div>`, container);\n      const div = container.querySelector('div')!;\n      assert.strictEqual((div as any).foo, 123);\n      assert.strictEqual((div as any).bar, 456);\n    });\n  });\n\n  suite('boolean attributes', () => {\n    test('renders a boolean attribute as an empty string when truthy', () => {\n      const t = (value: any) => html`<div ?foo=\"${value}\"></div>`;\n\n      render(t(true), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div foo=\"\"></div>');\n\n      render(t('a'), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div foo=\"\"></div>');\n\n      render(t(1), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div foo=\"\"></div>');\n    });\n\n    test('removes a boolean attribute when falsey', () => {\n      const t = (value: any) => html`<div ?foo=\"${value}\"></div>`;\n\n      render(t(false), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n      render(t(0), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n      render(t(null), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n      render(t(undefined), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    });\n  });\n\n  suite('events', () => {\n    setup(() => {\n      document.body.appendChild(container);\n    });\n\n    teardown(() => {\n      document.body.removeChild(container);\n    });\n\n    test('adds event listener functions, calls with right this value', () => {\n      let thisValue;\n      let event: Event|undefined = undefined;\n      const listener = function(this: any, e: any) {\n        event = e;\n        thisValue = this;\n      };\n      const eventContext = {} as EventTarget;  // eslint-disable-line\n      render(html`<div @click=${listener}></div>`, container, {eventContext});\n      const div = container.querySelector('div')!;\n      div.click();\n      if (event === undefined) {\n        throw new Error(`Event listener never fired!`);\n      }\n      assert.equal(thisValue, eventContext);\n\n      // MouseEvent is not a function in IE, so the event cannot be an instance\n      // of it\n      if (typeof MouseEvent === 'function') {\n        assert.instanceOf(event, MouseEvent);\n      } else {\n        assert.isDefined((event as MouseEvent).initMouseEvent);\n      }\n    });\n\n    test('adds event listener objects, calls with right this value', () => {\n      let thisValue;\n      const listener = {\n        handleEvent(_e: Event) {\n          thisValue = this;\n        }\n      };\n      const eventContext = {} as EventTarget;  // eslint-disable-line\n      render(html`<div @click=${listener}></div>`, container, {eventContext});\n      const div = container.querySelector('div')!;\n      div.click();\n      assert.equal(thisValue, listener);\n    });\n\n    test('only adds event listener once', () => {\n      let count = 0;\n      const listener = () => {\n        count++;\n      };\n      render(html`<div @click=${listener}></div>`, container);\n      render(html`<div @click=${listener}></div>`, container);\n\n      const div = container.querySelector('div')!;\n      div.click();\n      assert.equal(count, 1);\n    });\n\n    test('allows updating event listener', () => {\n      let count1 = 0;\n      const listener1 = () => {\n        count1++;\n      };\n      let count2 = 0;\n      const listener2 = () => {\n        count2++;\n      };\n      const t = (listener: () => void) => html`<div @click=${listener}></div>`;\n      render(t(listener1), container);\n      render(t(listener2), container);\n\n      const div = container.querySelector('div')!;\n      div.click();\n      assert.equal(count1, 0);\n      assert.equal(count2, 1);\n    });\n\n    test(\n        'allows updating event listener without extra calls to remove/addEventListener',\n        () => {\n          let listener: Function|null;\n          const t = () => html`<div @click=${listener}></div>`;\n          render(t(), container);\n          const div = container.querySelector('div')!;\n\n          let addCount = 0;\n          let removeCount = 0;\n          div.addEventListener = () => addCount++;\n          div.removeEventListener = () => removeCount++;\n\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          listener = () => {};\n          render(t(), container);\n          assert.equal(addCount, 1);\n          assert.equal(removeCount, 0);\n\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          listener = () => {};\n          render(t(), container);\n          assert.equal(addCount, 1);\n          assert.equal(removeCount, 0);\n\n          listener = null;\n          render(t(), container);\n          assert.equal(addCount, 1);\n          assert.equal(removeCount, 1);\n\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          listener = () => {};\n          render(t(), container);\n          assert.equal(addCount, 2);\n          assert.equal(removeCount, 1);\n\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          listener = () => {};\n          render(t(), container);\n          assert.equal(addCount, 2);\n          assert.equal(removeCount, 1);\n        });\n\n    test('removes event listeners', () => {\n      let target;\n      let listener: any = (e: any) => target = e.target;\n      const t = () => html`<div @click=${listener}></div>`;\n      render(t(), container);\n      const div = container.querySelector('div')!;\n      div.click();\n      assert.equal(target, div);\n\n      listener = null;\n      target = undefined;\n      render(t(), container);\n      div.click();\n      assert.equal(target, undefined);\n    });\n\n\n    test('allows capturing events', () => {\n      let event!: Event;\n      let eventPhase!: number;\n      const listener = {\n        handleEvent(e: Event) {\n          event = e;\n          // read here because it changes\n          eventPhase = event.eventPhase;\n        },\n        capture: true,\n      };\n      render(\n          html`\n        <div id=\"outer\" @test=${listener}>\n          <div id=\"inner\"><div>\n        </div>\n      `,\n          container);\n      const inner = container.querySelector('#inner')!;\n      inner.dispatchEvent(new Event('test'));\n      assert.isOk(event);\n      assert.equal(eventPhase, Event.CAPTURING_PHASE);\n    });\n  });\n\n  suite('directives', () => {\n    test('renders directives on NodeParts', () => {\n      const fooDirective = directive(() => (part: Part) => {\n        part.setValue('foo');\n      });\n\n      render(html`<div>${fooDirective()}</div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n    });\n\n    test('renders directives on AttributeParts', () => {\n      const fooDirective = directive(() => (part: AttributePart) => {\n        part.setValue('foo');\n      });\n\n      render(html`<div foo=\"${fooDirective()}\"></div>`, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div foo=\"foo\"></div>');\n    });\n\n    test('renders directives on PropertyParts', () => {\n      const fooDirective = directive(() => (part: AttributePart) => {\n        part.setValue(1234);\n      });\n\n      render(html`<div .foo=\"${fooDirective()}\"></div>`, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n      assert.strictEqual((container.firstElementChild as any).foo, 1234);\n    });\n\n    testSkipChrome41(test)(\n        'event listeners can see events fired by dynamic children', () => {\n          // This tests that node directives are called in the commit phase, not\n          // the setValue phase\n          let event: Event|undefined = undefined;\n          document.body.appendChild(container);\n          render(\n              html`\n        <div @test-event=${(e: Event) => {\n                event = e;\n              }}>\n          ${directive(() => (part: NodePart) => {\n                // This emulates a custom element that fires an event in its\n                // connectedCallback\n                part.startNode.dispatchEvent(new CustomEvent('test-event', {\n                  bubbles: true,\n                }));\n              })()}\n        </div>`,\n              container);\n          document.body.removeChild(container);\n          assert.isOk(event);\n        });\n\n    test(\n        'event listeners can see events fired directives in AttributeParts',\n        () => {\n          // This tests that attribute directives are called in the commit\n          // phase, not the setValue phase\n          let event = undefined;\n          const fire = directive(() => (part: AttributePart) => {\n            part.committer.element.dispatchEvent(new CustomEvent('test-event', {\n              bubbles: true,\n            }));\n          });\n\n          render(\n              html`<div @test-event=${(e: Event) => {\n                event = e;\n              }} b=${fire()}></div>`,\n              container);\n          assert.isOk(event);\n        });\n  });\n\n  suite('<table>', () => {\n    testSkipForTemplatePolyfill(\n        test)('renders nested templates within table content', () => {\n      let table = html`<table>${html`<tr>${html`<td></td>`}</tr>`}</table>`;\n      render(table, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<table><tr><td></td></tr></table>');\n\n      table = html`<tbody>${html`<tr></tr>`}</tbody>`;\n      render(table, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<tbody><tr></tr></tbody>');\n\n      table = html`<table><tr></tr>${html`<tr></tr>`}</table>`;\n      render(table, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<table><tbody><tr></tr><tr></tr></tbody></table>');\n\n      table = html`<table><tr><td></td>${html`<td></td>`}</tr></table>`;\n      render(table, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<table><tbody><tr><td></td><td></td></tr></tbody></table>');\n\n      table = html`<table><tr><td></td>${html`<td></td>`}${\n          html`<td></td>`}</tr></table>`;\n      render(table, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<table><tbody><tr><td></td><td></td><td></td></tr></tbody></table>');\n    });\n\n    // On Safari 10.0 (but not 10.1), the attribute value \"<table>\" is\n    // escaped to \"&lt;table&gt;\". That shouldn't cause this test to\n    // fail, so we skip\n    testSkipSafari10_0(test)(\n        'renders quoted attributes with \"<table>\" before an expression', () => {\n          const template = html`<div a=\"<table>${'foo'}\"></div>`;\n          render(template, container);\n          assert.equal(\n              stripExpressionMarkers(container.innerHTML),\n              `<div a=\"<table>foo\"></div>`);\n        });\n  });\n\n  suite('<style>', () => {\n    test('renders no comments inside textContent', () => {\n      render(html`<style>${''}</style>`, container);\n      assert.equal(container.firstElementChild!.textContent, '');\n    });\n\n    test('renders style tags with expressions correctly', () => {\n      const color = 'red';\n      const t = html`\n        <style>\n          h1 {\n            color: ${color};\n          }\n        </style>`;\n      render(t, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <style>\n          h1 {\n            color: red;\n          }\n        </style>`);\n    });\n\n    test('renders an attribute after a style binding', () => {\n      render(\n          html`\n              <style>\n                .foo {\n                  background: ${'black'};\n                }\n              </style>\n              <a href=\"/buy/${'foo'}\"></a>\n            `,\n          container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), `\n              <style>\n                .foo {\n                  background: black;\n                }\n              </style>\n              <a href=\"/buy/foo\"></a>\n            `);\n    });\n\n    test('renders an attribute after empty style node binding', () => {\n      // This test is sensitive to the exact binding in the style tag.\n      // Make sure the binding takes up the whole element with no text\n      // on either side of it\n\n      // Work around a false positive lit-html pluging lint error:\n      const h = html;\n      render(\n          h`\n          <style>${'bar'}</style>\n          <a href=\"/buy/${'foo'}\"></a>\n        `,\n          container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), `\n          <style>bar</style>\n          <a href=\"/buy/foo\"></a>\n        `);\n    });\n  });\n\n  suite('<template>', () => {\n    test('bindings work in <template>', () => {\n      const t = (a: string, b: string) => html`\n        <template>\n          <span>${a}</span>\n        </template>\n        <div>${b}</div>\n      `;\n      render(t('1', '2'), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <template>\n          <span>1</span>\n        </template>\n        <div>2</div>\n      `);\n    });\n\n    test('bindings work in <template> with attribute bindings', () => {\n      const t = (a: string, b: string, c: string) => html`\n        <template foo=${a}>\n          <span>${b}</span>\n        </template>\n        <div>${c}</div>\n      `;\n      render(t('1', '2', '3'), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <template foo=\"1\">\n          <span>2</span>\n        </template>\n        <div>3</div>\n      `);\n    });\n  });\n\n  suite('text and attributes', () => {\n    test('renders attributes bindings after text bindings', () => {\n      render(\n          html`\n        <div>${''}</div>\n        <div foo=${'bar'}></div>\n      `,\n          container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), `\n        <div></div>\n        <div foo=\"bar\"></div>\n      `);\n    });\n    test('renders a combination of stuff', () => {\n      render(\n          html`\n          <div foo=\"${'bar'}\">\n            ${'baz'}\n            <p>${'qux'}</p>\n          </div>`,\n          container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), `\n          <div foo=\"bar\">\n            baz\n            <p>qux</p>\n          </div>`);\n    });\n  });\n\n  suiteIfCustomElementsAreSupported(suite)('custom elements', () => {\n    class PropertySetterElement extends HTMLElement {\n      readonly calledSetter = false;\n      private _value?: string = undefined;\n\n      get value(): string|undefined {\n        return this._value;\n      }\n\n      set value(value: string|undefined) {\n        (this as {calledSetter: boolean}).calledSetter = true;\n        this._value = value;\n      }\n    }\n    customElements.define('property-tester', PropertySetterElement);\n\n    class MutatesInConstructorElement extends HTMLElement {\n      constructor() {\n        super();\n        this.appendChild(document.createElement('div'));\n      }\n    }\n    customElements.define(\n        'mutates-in-constructor', MutatesInConstructorElement);\n\n    teardown(() => {\n      if (container.parentElement === document.body) {\n        document.body.removeChild(container);\n      }\n    });\n\n    test('uses property setters for custom elements', () => {\n      // Container must be in the document for the custom element to upgrade\n      document.body.appendChild(container);\n      render(\n          html`<property-tester .value=${'foo'}></property-tester>`, container);\n      const instance = container.firstElementChild as PropertySetterElement;\n      assert.equal(instance.value, 'foo');\n      assert.isTrue(instance.calledSetter);\n    });\n\n    test('uses property setters for disconnected custom elements', () => {\n      // Here we _don't_ connect the container to the document, to highlight\n      // that we aren't creating upgraded custom elements in this case when we\n      // ideally should be.\n      render(\n          html`<property-tester .value=${'foo'}></property-tester>`, container);\n      const instance = container.firstElementChild as PropertySetterElement;\n      assert.equal(instance.value, 'foo');\n      assert.isTrue(instance.calledSetter);\n    });\n\n    test(\n        'uses property setters in nested templates added after the initial render',\n        () => {\n          // Container must be in the document for the custom element to upgrade\n          document.body.appendChild(container);\n          const template = (content: any) => html`${content}`;\n\n          // Do an initial render\n          render(template('some content'), container);\n\n          // Now update the rendered template, render a nested template\n          const fragment =\n              html`<property-tester .value=${'foo'}></property-tester>`;\n          render(template(fragment), container);\n\n          const instance = container.firstElementChild as PropertySetterElement;\n          assert.equal(instance.value, 'foo');\n          assert.isTrue(instance.calledSetter);\n        });\n\n    test(\n        'uses property setters in disconnected nested templates added after the initial render',\n        () => {\n          // Here we _don't_ connect the container to the document, to highlight\n          // that we aren't creating upgraded custom elements in this case when\n          // we ideally should be.\n          const template = (content: any) => html`${content}`;\n\n          // Do an initial render\n          render(template('some content'), container);\n\n          // Now update the rendered template, render a nested template\n          const fragment =\n              html`<property-tester .value=${'foo'}></property-tester>`;\n          render(template(fragment), container);\n\n          const instance = container.firstElementChild as PropertySetterElement;\n          assert.equal(instance.value, 'foo');\n          assert.isTrue(instance.calledSetter);\n        });\n\n    // We need Safari to implement customElements.upgrade before we can enable\n    // this.\n    test.skip(\n        'does not upgrade elements until after parts are established', () => {\n          render(\n              html`\n            <mutates-in-constructor></mutates-in-constructor>\n            <span>${'test'}</span>\n      `,\n              container);\n          assert.equal(container.querySelector('span')!.textContent, 'test');\n        });\n  });\n\n  suite('updates', () => {\n    let container: HTMLElement;\n\n    setup(() => {\n      container = document.createElement('div');\n    });\n\n    test('updates when called multiple times with arrays', () => {\n      const ul = (list: string[]) => {\n        const items = list.map((item) => html`<li>${item}</li>`);\n        return html`<ul>${items}</ul>`;\n      };\n      render(ul(['a', 'b', 'c']), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<ul><li>a</li><li>b</li><li>c</li></ul>');\n      render(ul(['x', 'y']), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<ul><li>x</li><li>y</li></ul>');\n    });\n\n    test('dirty checks simple values', () => {\n      const foo = 'aaa';\n\n      const t = () => html`<div>${foo}</div>`;\n\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>aaa</div>');\n      const text = container.querySelector('div')!;\n      assert.equal(text.textContent, 'aaa');\n\n      // Set textContent manually. Since lit-html doesn't dirty check against\n      // actual DOM, but again previous part values, this modification should\n      // persist through the next render with the same value.\n      text.textContent = 'bbb';\n      assert.equal(text.textContent, 'bbb');\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>bbb</div>');\n\n      // Re-render with the same content, should be a no-op\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>bbb</div>');\n      const text2 = container.querySelector('div')!;\n\n      // The next node should be the same too\n      assert.strictEqual(text, text2);\n    });\n\n    test('dirty checks node values', async () => {\n      const node = document.createElement('div');\n      const t = () => html`${node}`;\n\n      let mutationRecords: MutationRecord[] = [];\n      const mutationObserver = new MutationObserver((records) => {\n        mutationRecords = records;\n      });\n      mutationObserver.observe(container, {childList: true});\n\n      assert.equal(stripExpressionMarkers(container.innerHTML), '');\n      render(t(), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n      // Wait for mutation callback to be called\n      await new Promise((resolve) => setTimeout(resolve));\n\n      const elementNodes: Node[] = [];\n      for (const record of mutationRecords) {\n        elementNodes.push(...Array.from(record.addedNodes)\n                              .filter((n) => n.nodeType === Node.ELEMENT_NODE));\n      }\n      assert.equal(elementNodes.length, 1);\n\n      mutationRecords = [];\n      render(t(), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n      await new Promise((resolve) => setTimeout(resolve));\n      assert.equal(mutationRecords.length, 0);\n    });\n\n    test('renders to and updates a container', () => {\n      let foo = 'aaa';\n\n      const t = () => html`<div>${foo}</div>`;\n\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>aaa</div>');\n      const div = container.querySelector('div')!;\n      assert.equal(div.tagName, 'DIV');\n\n      foo = 'bbb';\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>bbb</div>');\n      const div2 = container.querySelector('div')!;\n      // check that only the part changed\n      assert.equal(div, div2);\n    });\n\n    test('renders to and updates sibling parts', () => {\n      let foo = 'foo';\n      const bar = 'bar';\n\n      const t = () => html`<div>${foo}${bar}</div>`;\n\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>foobar</div>');\n\n      foo = 'bbb';\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>bbbbar</div>');\n    });\n\n    test('renders and updates attributes', () => {\n      let foo = 'foo';\n      const bar = 'bar';\n\n      const t = () => html`<div a=\"${foo}:${bar}\"></div>`;\n\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div a=\"foo:bar\"></div>');\n\n      foo = 'bbb';\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div a=\"bbb:bar\"></div>');\n    });\n\n    test('updates nested templates', () => {\n      let foo = 'foo';\n      const bar = 'bar';\n      const baz = 'baz';\n\n      const t = (x: boolean) => {\n        let partial;\n        if (x) {\n          partial = html`<h1>${foo}</h1>`;\n        } else {\n          partial = html`<h2>${bar}</h2>`;\n        }\n\n        return html`${partial}${baz}`;\n      };\n\n      render(t(true), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<h1>foo</h1>baz');\n\n      foo = 'bbb';\n      render(t(true), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<h1>bbb</h1>baz');\n\n      render(t(false), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<h2>bar</h2>baz');\n    });\n\n    test('updates arrays', () => {\n      let items = [1, 2, 3];\n      const t = () => html`<div>${items}</div>`;\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>123</div>');\n\n      items = [3, 2, 1];\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>321</div>');\n    });\n\n    test('updates arrays that shrink then grow', () => {\n      let items: number[];\n      const t = () => html`<div>${items}</div>`;\n\n      items = [1, 2, 3];\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>123</div>');\n\n      items = [4];\n      render(t(), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div>4</div>');\n\n      items = [5, 6, 7];\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>567</div>');\n    });\n\n    test('updates an element', () => {\n      let child: any = document.createElement('p');\n      const t = () => html`<div>${child}<div></div></div>`;\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div><p></p><div></div></div>');\n\n      child = undefined;\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div><div></div></div>');\n\n      child = document.createTextNode('foo');\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div>foo<div></div></div>');\n    });\n\n    test('updates an array of elements', () => {\n      let children: any = [\n        document.createElement('p'),\n        document.createElement('a'),\n        document.createElement('span')\n      ];\n      const t = () => html`<div>${children}</div>`;\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div><p></p><a></a><span></span></div>');\n\n      children = null;\n      render(t(), container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n      children = document.createTextNode('foo');\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n    });\n\n    test(\n        'overwrites an existing TemplateInstance if one exists and does ' +\n            'not have a matching Template',\n        () => {\n          render(html`<div>foo</div>`, container);\n\n          assert.equal(container.children.length, 1);\n          const fooDiv = container.children[0];\n          assert.equal(fooDiv.textContent, 'foo');\n\n          render(html`<div>bar</div>`, container);\n\n          assert.equal(container.children.length, 1);\n          const barDiv = container.children[0];\n          assert.equal(barDiv.textContent, 'bar');\n\n          assert.notEqual(fooDiv, barDiv);\n        });\n  });\n\n  suite('security', () => {\n    function importToContainer(content: DocumentFragment) {\n      const container = document.createElement('div');\n      container.appendChild(document.importNode(content, true));\n      return container;\n    }\n\n    test('resists XSS attempt in node values', () => {\n      const result = html`<div>${'<script>alert(\"boo\");</script>'}</div>`;\n      const container =\n          importToContainer(templateFactory(result).element.content);\n      assert(container.innerHTML, '<div></div>');\n    });\n\n    test('resists XSS attempt in attribute values', () => {\n      const result = html\n      `<div foo=\"${'\"><script>alert(\"boo\");</script><div foo=\"'}\"></div>`;\n      const container =\n          importToContainer(templateFactory(result).element.content);\n      assert(container.innerHTML, '<div></div>');\n    });\n  });\n\n  // `render` directly passes the given value to `NodePart#setValue`, so these\n  // tests are really just a sanity check that they are accepted by `render`.\n  // Tests about rendering behavior for specific values should generally be\n  // grouped with those of `NodePart#setValue` and `#commit`.\n  suite('accepts types other than TemplateResult', () => {\n    test('accepts undefined', () => {\n      render(undefined, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), '');\n    });\n\n    test('accepts a string', () => {\n      render('test', container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), 'test');\n    });\n\n    test('accepts an object', () => {\n      render({}, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '[object Object]');\n    });\n\n    test('accepts an object with `toString`', () => {\n      render(\n          {\n            toString() {\n              return 'toString!';\n            }\n          },\n          container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), 'toString!');\n    });\n\n    test('accepts an symbol', () => {\n      const sym = Symbol('description!');\n      render(sym, container);\n      assert.equal(stripExpressionMarkers(container.innerHTML), String(sym));\n    });\n\n    test('accepts a node', () => {\n      const div = document.createElement('div');\n      div.appendChild(document.createTextNode('text in the div'));\n      render(div, container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML),\n          '<div>text in the div</div>');\n    });\n  });\n});\n"]}