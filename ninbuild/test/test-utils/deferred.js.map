{"version":3,"file":"deferred.js","sourceRoot":"","sources":["../../../src/test/test-utils/deferred.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH;;;GAGG;AACH,MAAM,OAAO,QAAQ;IAKnB;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACzC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * A helper for creating Promises that can be resolved or rejected after\n * initial creation.\n */\nexport class Deferred<T> {\n  readonly promise: Promise<T>;\n  resolve!: (value: T) => void;\n  reject!: (error: Error) => void;\n\n  constructor() {\n    this.promise = new Promise<T>((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n"]}