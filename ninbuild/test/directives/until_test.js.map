{"version":3,"file":"until_test.js","sourceRoot":"","sources":["../../../src/test/directives/until_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {until} from '../../directives/until.js';\nimport {render} from '../../lib/render.js';\nimport {html} from '../../lit-html.js';\nimport {Deferred} from '../test-utils/deferred.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\n\nconst assert = chai.assert;\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nsuite('until', () => {\n  let container: HTMLDivElement;\n  let deferred: Deferred<string>;\n\n  setup(() => {\n    container = document.createElement('div');\n    deferred = new Deferred<string>();\n  });\n\n  test('renders a Promise when it resolves', async () => {\n    const deferred = new Deferred<any>();\n    render(html`<div>${until(deferred.promise)}</div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    deferred.resolve('foo');\n    await deferred.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n  });\n\n  test('renders non-Promises immediately', async () => {\n    const defaultContent = html`<span>loading...</span>`;\n    render(\n        html`<div>${until(deferred.promise, defaultContent)}</div>`, container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        '<div><span>loading...</span></div>');\n    deferred.resolve('foo');\n    await deferred.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n  });\n\n  test('renders primitive low-priority content only once', async () => {\n    const go = () => render(\n        html`<div>${until(deferred.promise, 'loading...')}</div>`, container);\n\n    go();\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>loading...</div>');\n    deferred.resolve('foo');\n    await deferred.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    go();\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n  });\n\n  test('renders non-primitive low-priority content only once', async () => {\n    const go = () => render(\n        html`<div>${until(deferred.promise, html`loading...`)}</div>`,\n        container);\n\n    go();\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>loading...</div>');\n    deferred.resolve('foo');\n    await deferred.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    go();\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n  });\n\n  test('renders changing defaultContent', async () => {\n    const t = (d: any) => html`<div>${until(deferred.promise, d)}</div>`;\n    render(t('A'), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>A</div>');\n\n    render(t('B'), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>B</div>');\n\n    deferred.resolve('C');\n    await deferred.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>C</div>');\n  });\n\n  test('renders a Promise to an attribute', async () => {\n    const promise = Promise.resolve('foo');\n    render(html`<div test=${until(promise)}></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    await promise;\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div test=\"foo\"></div>');\n  });\n\n  test('renders defaultContent to an attribute', async () => {\n    const promise = Promise.resolve('foo');\n    render(html`<div test=${until(promise, 'bar')}></div>`, container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div test=\"bar\"></div>');\n    await promise;\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div test=\"foo\"></div>');\n  });\n\n  test('renders a Promise to an interpolated attribute', async () => {\n    const promise = Promise.resolve('foo');\n    render(html`<div test=\"value:${until(promise)}\"></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    await promise;\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        '<div test=\"value:foo\"></div>');\n  });\n\n  test('renders defaultContent to an interpolated attribute', async () => {\n    const promise = Promise.resolve('foo');\n    render(html`<div test=\"value:${until(promise, 'bar')}\"></div>`, container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        '<div test=\"value:bar\"></div>');\n    await promise;\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        '<div test=\"value:foo\"></div>');\n  });\n\n  test('renders a Promise to a property', async () => {\n    const promise = Promise.resolve('foo');\n    render(html`<div .test=${until(promise)}></div>`, container);\n    const div = container.querySelector('div');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    assert.equal((div as any).test, undefined);\n    await promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    assert.equal((div as any).test, 'foo');\n  });\n\n  test('renders a Promise to a boolean attribute', async () => {\n    const promise = Promise.resolve(true);\n    render(html`<div ?test=${until(promise)}></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    await promise;\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div test=\"\"></div>');\n  });\n\n  test('renders a Promise to an event binding', async () => {\n    let called = false;\n    const promise = Promise.resolve(() => {\n      called = true;\n    });\n    render(html`<div @test=${until(promise)}></div>`, container);\n    const div = container.querySelector('div')!;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    div.dispatchEvent(new CustomEvent('test'));\n    assert.isFalse(called);\n    await promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    div.dispatchEvent(new CustomEvent('test'));\n    assert.isTrue(called);\n  });\n\n  test('renders new Promise over existing Promise', async () => {\n    const t = (v: any) =>\n        html`<div>${until(v, html`<span>loading...</span>`)}</div>`;\n    render(t(deferred.promise), container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        '<div><span>loading...</span></div>');\n\n    const deferred2 = new Deferred<string>();\n    render(t(deferred2.promise), container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        '<div><span>loading...</span></div>');\n\n    deferred2.resolve('bar');\n    await deferred2.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n\n    deferred.resolve('foo');\n    await deferred.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n  });\n\n  test('renders racing Promises across renders correctly', async () => {\n    const deferred1 = new Deferred<any>();\n    const deferred2 = new Deferred<any>();\n\n    const t = (promise: any) => html`<div>${until(promise)}</div>`;\n\n    // First render, first Promise, no value\n    render(t(deferred1.promise), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    // Second render, second Promise, still no value\n    render(t(deferred2.promise), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    // Resolve the first Promise, should not update the container\n    deferred1.resolve('foo');\n    await deferred1.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    // Resolve the second Promise, should update the container\n    deferred2.resolve('bar');\n    await deferred2.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n  });\n\n  test('renders Promises resolving in high-to-low priority', async () => {\n    const deferred1 = new Deferred<any>();\n    const deferred2 = new Deferred<any>();\n\n    const t = () =>\n        html`<div>${until(deferred1.promise, deferred2.promise)}</div>`;\n\n    // First render with neither Promise resolved\n    render(t(), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    // Resolve the primary Promise, updates the DOM\n    deferred1.resolve('foo');\n    await deferred1.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    // Resolve the secondary Promise, should not update the container\n    deferred2.resolve('bar');\n    await deferred2.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n  });\n\n  test('renders Promises resolving in low-to-high priority', async () => {\n    const deferred1 = new Deferred<any>();\n    const deferred2 = new Deferred<any>();\n\n    const t = () =>\n        html`<div>${until(deferred1.promise, deferred2.promise)}</div>`;\n\n    // First render with neither Promise resolved\n    render(t(), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    // Resolve the secondary Promise, updates the DOM\n    deferred2.resolve('bar');\n    await deferred2.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n\n    // Resolve the primary Promise, updates the DOM\n    deferred1.resolve('foo');\n    await deferred1.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n  });\n\n  test('renders Promises with changing priorities', async () => {\n    const promise1 = Promise.resolve('foo');\n    const promise2 = Promise.resolve('bar');\n\n    const t = (p1: any, p2: any) => html`<div>${until(p1, p2)}</div>`;\n\n    render(t(promise1, promise2), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    // Await a microtask to let both Promise then callbacks go\n    await 0;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    render(t(promise2, promise1), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n    await 0;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n  });\n\n  test('renders low-priority content when arguments change', async () => {\n    const deferred1 = new Deferred<any>();\n    const promise2 = Promise.resolve('bar');\n\n    const t = (p1: any, p2: any) => html`<div>${until(p1, p2)}</div>`;\n\n    // First render a high-priority value\n    render(t('string', promise2), container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>string</div>');\n    // Await a microtask to let both Promise then callbacks go\n    await 0;\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>string</div>');\n\n    // Then render new Promises with the low-priority Promise already resolved\n    render(t(deferred1.promise, promise2), container);\n    // Because they're Promises, nothing happens synchronously\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>string</div>');\n    await 0;\n    // Low-priority renders\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n    deferred1.resolve('foo');\n    await deferred1.promise;\n    // High-priority renders\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n  });\n\n  test('renders Promises resolving after changing priority', async () => {\n    const deferred1 = new Deferred<any>();\n    const deferred2 = new Deferred<any>();\n\n    const t = (p1: any, p2: any) => html`<div>${until(p1, p2)}</div>`;\n\n    // First render with neither Promise resolved\n    render(t(deferred1.promise, deferred2.promise), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    // Change priorities\n    render(t(deferred2.promise, deferred1.promise), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    // Resolve the primary Promise, updates the DOM\n    deferred1.resolve('foo');\n    await deferred1.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    // Resolve the secondary Promise, also updates the DOM\n    deferred2.resolve('bar');\n    await deferred2.promise;\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n  });\n});\n"]}