{"version":3,"file":"async-replace_test.js","sourceRoot":"","sources":["../../../src/test/directives/async-replace_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {asyncReplace} from '../../directives/async-replace.js';\nimport {render} from '../../lib/render.js';\nimport {html} from '../../lit-html.js';\nimport {TestAsyncIterable} from '../lib/test-async-iterable.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\n\nconst assert = chai.assert;\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// Set Symbol.asyncIterator on browsers without it\nif (typeof Symbol !== undefined && Symbol.asyncIterator === undefined) {\n  Object.defineProperty(Symbol, 'Symbol.asyncIterator', {value: Symbol()});\n}\n\nsuite('asyncReplace', () => {\n  let container: HTMLDivElement;\n  let iterable: TestAsyncIterable<string>;\n\n  setup(() => {\n    container = document.createElement('div');\n    iterable = new TestAsyncIterable<string>();\n  });\n\n  test('replaces content as the async iterable yields new values', async () => {\n    render(html`<div>${asyncReplace(iterable)}</div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    await iterable.push('bar');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n  });\n\n  test('clears the Part when a value is undefined', async () => {\n    render(html`<div>${asyncReplace(iterable)}</div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    await iterable.push(undefined as unknown as string);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  test('uses the mapper function', async () => {\n    render(\n        html`<div>${asyncReplace(iterable, (v, i) => html`${i}: ${v} `)}</div>`,\n        container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>0: foo </div>');\n\n    await iterable.push('bar');\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>1: bar </div>');\n  });\n\n  test('renders new iterable over a pending iterable', async () => {\n    const t = (iterable: any) => html`<div>${asyncReplace(iterable)}</div>`;\n    render(t(iterable), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    const iterable2 = new TestAsyncIterable<string>();\n    render(t(iterable2), container);\n\n    // The last value is preserved until we receive the first\n    // value from the new iterable\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    await iterable2.push('hello');\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>hello</div>');\n\n    await iterable.push('bar');\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>hello</div>');\n  });\n\n  test(\n      'renders the same iterable even when the iterable new value is emitted at the same time as a re-render',\n      async () => {\n        const t = (iterable: any) => html`<div>${asyncReplace(iterable)}</div>`;\n        let wait: Promise<void>;\n        render(t(iterable), container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n        wait = iterable.push('hello');\n        render(t(iterable), container);\n        await wait;\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<div>hello</div>');\n\n        wait = iterable.push('bar');\n        render(t(iterable), container);\n        await wait;\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<div>bar</div>');\n      });\n\n  test('renders new value over a pending iterable', async () => {\n    const t = (v: any) => html`<div>${v}</div>`;\n    // This is a little bit of an odd usage of directives as values, but it\n    // is possible, and we check here that asyncReplace plays nice in this case\n    render(t(asyncReplace(iterable)), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n\n    await iterable.push('foo');\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>foo</div>');\n\n    render(t('hello'), container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>hello</div>');\n\n    await iterable.push('bar');\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div>hello</div>');\n  });\n\n  test('does not render the first value if it is replaced first', async () => {\n    async function* generator(delay: Promise<any>, value: any) {\n      await delay;\n      yield value;\n    }\n\n    const component = (value: any) => html`<p>${asyncReplace(value)}</p>`;\n    const delay = (delay: number) =>\n        new Promise((res) => setTimeout(res, delay));\n\n    render(component(generator(delay(20), 'slow')), container);\n    render(component(generator(delay(10), 'fast')), container);\n    await delay(30);\n\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<p>fast</p>');\n  });\n});\n"]}