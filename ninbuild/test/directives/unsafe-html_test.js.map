{"version":3,"file":"unsafe-html_test.js","sourceRoot":"","sources":["../../../src/test/directives/unsafe-html_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {unsafeHTML} from '../../directives/unsafe-html.js';\nimport {render} from '../../lib/render.js';\nimport {html} from '../../lit-html.js';\nimport {policy, trustedTypesIsEnforced} from '../test-utils/security.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\n\nconst assert = chai.assert;\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nsuite('unsafeHTML', () => {\n  let container: HTMLElement;\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  test('renders HTML', () => {\n    render(\n        html`<div>before${\n            unsafeHTML(policy.createHTML('<span>inner</span>after'))}</div>`,\n        container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        '<div>before<span>inner</span>after</div>');\n  });\n\n  if (!trustedTypesIsEnforced()) {\n    test('dirty checks primitive values', () => {\n      const value = 'aaa';\n      const t = () => html`<div>${unsafeHTML(value)}</div>`;\n\n      // Initial render\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>aaa</div>');\n\n      // Modify instance directly. Since lit-html doesn't dirty check against\n      // actual DOM, but again previous part values, this modification should\n      // persist through the next render if dirty checking works.\n      const text = container.querySelector('div')!.childNodes[1] as Text;\n      text.textContent = 'bbb';\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>bbb</div>');\n\n      // Re-render with the same value\n      render(t(), container);\n\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>bbb</div>');\n      const text2 = container.querySelector('div')!.childNodes[1] as Text;\n      assert.strictEqual(text, text2);\n    });\n\n    test('does not dirty check complex values', () => {\n      const value = ['aaa'];\n      const t = () => html`<div>${unsafeHTML(value)}</div>`;\n\n      // Initial render\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>aaa</div>');\n\n      // Re-render with the same value, but a different deep property\n      value[0] = 'bbb';\n      render(t(), container);\n      assert.equal(\n          stripExpressionMarkers(container.innerHTML), '<div>bbb</div>');\n    });\n  }\n\n  test('renders after other values', () => {\n    const value = policy.createHTML('<span></span>');\n    const primitive = 'aaa';\n    const t = (content: any) => html`<div>${content}</div>`;\n\n    // Initial unsafeHTML render\n    render(t(unsafeHTML(value)), container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        '<div><span></span></div>');\n\n    // Re-render with a non-unsafeHTML value\n    render(t(primitive), container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>aaa</div>');\n\n    // Re-render with unsafeHTML again\n    render(t(unsafeHTML(value)), container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML),\n        '<div><span></span></div>');\n  });\n});\n"]}