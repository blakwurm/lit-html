{"version":3,"file":"if-defined_test.js","sourceRoot":"","sources":["../../../src/test/directives/if-defined_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {ifDefined} from '../../directives/if-defined.js';\nimport {render} from '../../lib/render.js';\nimport {html} from '../../lit-html.js';\nimport {stripExpressionMarkers} from '../test-utils/strip-markers.js';\n\nconst assert = chai.assert;\n\nsuite('ifDefined', () => {\n  let container: HTMLDivElement;\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  test('sets an attribute with a defined value', () => {\n    render(html`<div foo=\"${ifDefined('a')}\"></div>`, container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div foo=\"a\"></div>');\n  });\n\n  test('removes an attribute with an undefined value', () => {\n    render(html`<div foo=\"${ifDefined(undefined)}\"></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  test('sets an attribute with a previously undefined value', () => {\n    render(html`<div foo=\"${ifDefined(undefined)}\"></div>`, container);\n    render(html`<div foo=\"${ifDefined('a')}\"></div>`, container);\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div foo=\"a\"></div>');\n  });\n\n  test('removes an attribute with previously defined value', () => {\n    render(html`<div foo=\"${ifDefined('a')}\"></div>`, container);\n    render(html`<div foo=\"${ifDefined(undefined)}\"></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  test('removes an attribute with previous value set outside ifDefined', () => {\n    const go = (v: unknown) => render(html`<div foo=\"${v}\"></div>`, container);\n    go('a');\n    go(ifDefined(undefined));\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  test('passes a defined value to a NodePart', () => {\n    render(html`<div>${ifDefined('a')}</div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>a</div>');\n  });\n\n  test('passes an undefined value to a NodePart', () => {\n    render(html`<div>${ifDefined(undefined)}</div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  test('removes an attribute with an interpolated undefined value', () => {\n    render(html`<div foo=\"it's: ${ifDefined(undefined)}\"></div>`, container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  test('removes an attribute with multiple undefined values', () => {\n    render(\n        html`<div foo=\"they're both: ${ifDefined(undefined)}${\n            ifDefined(undefined)}\"></div>`,\n        container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  test('removes an attribute with one defined then one undefined value', () => {\n    render(\n        html`<div foo=\"only one is: ${ifDefined('a')}${\n            ifDefined(undefined)}\"></div>`,\n        container);\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n  });\n\n  // TODO(justinfagnani): fix this, see\n  // https://github.com/Polymer/lit-html/issues/1066\n  test.skip(\n      'removes an attribute with one undefined then one defined value', () => {\n        render(\n            html`<div foo=\"only one is: ${ifDefined(undefined)}${\n                ifDefined('a')}\"></div>`,\n            container);\n        assert.equal(\n            stripExpressionMarkers(container.innerHTML), '<div></div>');\n      });\n\n  test('only sets the attribute when the value changed', async () => {\n    let setCount = 0;\n    const observer = new MutationObserver((records) => {\n      setCount += records.length;\n    });\n    const go = (value: string) =>\n        render(html`<div foo=\"1${ifDefined(value)}\"></div>`, container);\n\n    go('a');\n    const el = container.firstElementChild!;\n    observer.observe(el, {attributes: true});\n\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div foo=\"1a\"></div>');\n    assert.equal(setCount, 0);\n\n    go('a');\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div foo=\"1a\"></div>');\n    assert.equal(setCount, 0);\n  });\n\n  test('only removes the attribute when the value changed', async () => {\n    let removeCount = 0;\n    const go = (value: unknown) =>\n        render(html`<div foo=\"1${ifDefined(value)}\"></div>`, container);\n\n    go('a');\n    const el = container.firstElementChild!;\n    const origRemoveAttribute = el.removeAttribute.bind(el);\n    el.removeAttribute = (name: string) => {\n      removeCount++;\n      origRemoveAttribute(name);\n    };\n    assert.equal(\n        stripExpressionMarkers(container.innerHTML), '<div foo=\"1a\"></div>');\n    assert.equal(removeCount, 0);\n\n    go(undefined);\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    assert.equal(removeCount, 1);\n\n    go(undefined);\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div></div>');\n    assert.equal(removeCount, 1);\n  });\n\n  test('only sets node text value changed', async () => {\n    let setCount = 0;\n    const observer = new MutationObserver((records) => {\n      setCount += records.length;\n    });\n    const go = (value: string) =>\n        render(html`<div>${ifDefined(value)}</div>`, container);\n\n    go('a');\n    const el = container.firstElementChild!;\n    observer.observe(el, {characterData: true});\n\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>a</div>');\n    assert.equal(setCount, 0);\n\n    go('a');\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    assert.equal(stripExpressionMarkers(container.innerHTML), '<div>a</div>');\n    assert.equal(setCount, 0);\n  });\n});\n"]}